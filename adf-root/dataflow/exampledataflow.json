{
	"name": "exampledataflow",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_parquet",
						"type": "DatasetReference"
					},
					"name": "ReadSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "sink_parquet",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "CreateColumn"
				},
				{
					"name": "parse1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          updated as date,",
				"          confirmed as integer,",
				"          confirmed_change as integer,",
				"          deaths as integer,",
				"          deaths_change as short,",
				"          recovered as integer,",
				"          recovered_change as integer,",
				"          latitude as double,",
				"          longitude as double,",
				"          iso2 as string,",
				"          iso3 as string,",
				"          country_region as string,",
				"          admin_region_1 as string,",
				"          iso_subdivision as string,",
				"          admin_region_2 as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     limit: 100,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> ReadSource",
				"ReadSource derive(ano = year(updated)) ~> CreateColumn",
				"CreateColumn parse(format: 'json',",
				"     documentForm: 'documentPerLine') ~> parse1",
				"parse1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}